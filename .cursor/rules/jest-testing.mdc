---
description: Jest Testing
globs: *.test.js
---
# Jest Testing Rules

## Overview
This document defines generic guidelines for writing tests with Jest in our Hapi.js application. It applies to integration-style tests that simulate HTTP requests and verify user-visible behavior.

## Test Setup
- Fully initialize the server via a designated createServer() function.
- Use beforeAll to start the server and afterAll to stop it gracefully.
- Use beforeEach and afterEach to reset mocks (e.g., jest.clearAllMocks) and spies.

## Test Structure
- Group tests with describe blocks for clarity and logical separation.
- Use server.inject to simulate HTTP requests.
- Validate responses using status codes from common constants (e.g., statusCodes.ok) and match content with expect.stringContaining().

## Mocking and Assertions
- Use jest.spyOn to intercept external calls (e.g., fetch) for API simulation.
- Simulate both successful and error scenarios by controlling API responses (e.g., non-ok responses, rejected promises).
- Verify headers for redirection (e.g., HTTP 302 and location header) when applicable.

## Error Handling
- Capture error scenarios by ensuring controllers log errors via request.logger.error.
- Assert that appropriate error messages appear in the responses for both GET and POST requests.

## Best Practices
- Focus tests on user-visible behavior rather than internal implementation details.
- Maintain clarity by using descriptive text in assertions and grouping tests logically.
- Reuse the established patterns to ensure consistency across different test files.
