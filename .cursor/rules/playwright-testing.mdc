---
description: Playwright Testing
globs: tests/*.js
---
# Playwright Testing Standards

## Testing Philosophy
- Test user-visible behavior, not implementation details
- Keep tests isolated and independent
- Mock external dependencies and network calls
- Use data-test attributes sparingly, prefer role-based selectors

## Test Structure
- Place tests in `/tests` directory with `.spec.js` extension
- Group related tests using `test.describe()`
- Use `test.beforeEach()` for common setup
- Clear test naming: "should <expected behavior> when <condition>"

## GDS Component Testing
- Use role-based selectors: `getByRole('button', { name: 'Continue' })`
- Test error states and validation messages
- Verify error summary links focus corresponding fields
- Test back links and navigation patterns

### Common GDS Component Selectors
- Details Component:
  ```javascript
  // Target summary text
  page.locator('.govuk-details__summary-text', { hasText: 'Summary Text' })
  // Target content
  page.locator('.govuk-details__text').filter({ hasText: 'Content Text' })
  ```
- Table Component:
  ```javascript
  // Target table by caption
  page.getByRole('table', { name: 'Caption Text' })
  // Target specific row
  page.getByRole('row', { name: 'Row Content' })
  // Target elements within a row (scoped selectors)
  const row = page.getByRole('row', { name: 'Row Content' });
  row.locator('.govuk-tag')  // Only finds tags within this row
  ```
- Tags:
  ```javascript
  // Target tag by text
  page.locator('.govuk-tag', { hasText: 'Tag Text' })
  // Check for color variants
  await expect(tag).toHaveClass(/govuk-tag--blue/)  // Blue variant
  await expect(tag).toHaveClass(/govuk-tag--green/) // Green variant
  await expect(tag).toHaveClass(/govuk-tag--red/)   // Red variant
  ```
- Buttons:
  ```javascript
  page.getByRole('button', { name: 'Button Text' })
  ```

### GDS Component Testing Patterns
- Details Component:
  - Test summary text visibility
  - Test expand/collapse functionality
  - Verify content rendering
  - Check keyboard accessibility
- Tables:
  - Verify caption and headers
  - Test responsive behavior
  - Check cell content
- Form Components:
  - Test validation messages
  - Check error summary links
  - Verify hint text

## Accessibility Testing
- Integrate axe-core for automated accessibility checks
- Test keyboard navigation flows
- Verify screen reader announcements
- Test color contrast compliance
- Check ARIA attributes and roles

## Network and Data Handling
- Mock external API calls using page.route()
- Use test data fixtures for consistent state
- Reset database/state between tests
- Handle authentication consistently

## Best Practices
- Test components in both default and error states
- Verify form validation messages
- Ensure proper heading hierarchy
- Write focused, atomic tests

## Performance Considerations
- Minimize test setup/teardown overhead
- Reuse authentication state where possible
- Use test.parallel() for independent tests
- Implement proper waiting strategies